import random
from pyrogram import Client, filters
from pyrogram import Client as app
from time import time
from config import OWNER, OWNER_NAME, VIDEO
from ESLAM.info import (is_served_chat, add_served_chat, is_served_user, add_served_user, get_served_chats, get_served_users, del_served_chat, joinch)
from ESLAM.Data import (get_dev, get_dev_name, get_bot_name, set_bot_name, get_logger, get_group, get_channel, get_groupsr, get_channelsr, get_userbot, set_dev_user, get_dev_user, get_video_source, set_video_source, get_msg_start, set_msg_start, set_for_s, get_for_s)
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, Message, User, ChatPrivileges, ReplyKeyboardRemove, CallbackQuery
from pyrogram import enums
from pyrogram.errors import FloodWait
from pyrogram.enums import ChatType, ChatMemberStatus, ChatMembersFilter,ParseMode
import os
#os.system("pip install pyrogram && pip install tgcrypto && pip install pyromod && clear")

from pyrogram import Client, filters, idle
from pyromod import listen
import os
import re
import textwrap
import aiofiles
import aiohttp
from PIL import (Image, ImageDraw, ImageEnhance, ImageFilter,
                 ImageFont, ImageOps)
from youtubesearchpython.__future__ import VideosSearch


@Client.on_message(filters.command(["ุตูุฑ", "ุตูุฑู", "ุตูุฑุฉ", "ุฑูุฒูู", "ุฑูุฒูุฉ", "ุฑูุฒูุงุช"], ""))
async def sssor(client, message):
  if not message.chat.type == enums.ChatType.PRIVATE:
    await joinch(message)
  list = []
  user = await get_userbot(client.me.username)
  async for msg in user.get_chat_history("Picture_elnqyb"):
      if msg.media:
        list.append(msg)
  phot = random.choice(list)
  photo = f"https://t.me/Picture_elnqyb/{phot.id}"
  await message.reply_photo(photo=photo, caption="โง ๐๐๐๐ |โฏ หผ @EFFB0T หน๐หผ")

bot = [
  "ูุนุงู ูุดู",
  "ูุณุทุง ุดุบุงู ุดุบุงู ูุชูููุด",
  "ุจุญุจู ูุนู ููู ุนุงูุฒ ุงู",
  "ูุจูู ูุชููู ุนุงูุฒ ุงู ููุง ุงุณูุจู ูุงูุดู ",
  "ููุจ {} ูู ุฌูู",
  "ูุนู ูููุจ {} ",
  "ูุฑูุชูู ูุงููู ุจุณ ุจุญุจู ุจูุง ุงุนูู ุงู",
  "ุฎูุงุต ูุฒุฑูุง ูุถุญููุง ุงูุทู ุจูุง ุนุงูุฒ ุงู ุ",
  "ูููู ูููุจู ",
  "ุทุจ ุจุฐูุชู ูู ุงูุช ุจูุช ุชุฑุถุง ุญุฏ ููุฑููู ูุฏุงุ",
]
  
selections = [
    "ุงุณูู {} ูุตุญุจู",
    "ูุณุทุง ูููุชูู ุงุณูู {} ุงูุงู",
    "ูุนู ูุญุจ ",
    "ููู ูููุจู",
    "ูุณุทุง ููุง ุนุดุงู ุจุญุจู ุชุตุนุฏููุ",
    "ูุนู ูุงููู ุจุญุจู ุจุณ ูุงุฏููู ุจ {}",
    "ุชุนุฑู ุจุงููู ูุญุจู ุงูุชุฑ ูู ูุงุฏูุชูู {}",
    "ุงู ู ูุนูู ููู ูุฒุนูู",
    "ูุชุตูู ุนูู ุงููุจู ูุฏุง ",
    "ูุด ูุงุถููู ูุตุงูู ูููููู",
    "ูุณุทุง ูููู ููู ูุฒุนูู ูุนุงูุฒู ุชูุนุฏ ูุชุชูุฑุฌ ุน ุงุฎูู",
    "ุงูุฌุฒ ุนุงูุฒูู ุงุดูุทูู ูููุ",
    "ุดูููุง ูููุฏุง ุนููู ูุฌุงู ุชุทูุนูู ุนูููุง ",
    "ูุฑุญูู ุงุจููุง ุงุณูู {}",
]

tyet = ["ุงุณู ุงูุจุณุช ุชุจุนู ",
" ุงุญูู ุดู ุจุงูุตูู", 
"ูู ุงุถุทุฑูุช ุชุนูุด ูู ูุตู ุฎูุงูู ุดู ุฑุญ ุชุฎุชุงุฑ",
" ูู ุงูุด ุชุฎุงู", 
"ูู ุญูุงุชู ููู ุงูุด ุจูููู ุชุตูููู" 
"ุซูุงุซู ุงุดูุงุก ุชุฎุจูุง " , 
"ุงูุตู ููุณู ุจูููู " ,
"ุญุงุฌู ุจุชูุฑูุง ูููู " , 
"ุญุงุฌู ุนููุชูุง ููุฏูุช ุนูููุง " , 
"ุดุฎุต ุชูุชูุฏู " , 
"ูููู ูุณุชุญูู ุชูุณุงู " , 
"ุจูุฏ ููุณู ุชุณุงูุฑูุง " , 
"ุงุฎุฑ ูุฑู ุนูุทุช ูููุง ูููู " , 
"ุนููุช ุดุฆ ุญุฏ ูุฑูู ุจุณุจุจู " , 
"ุดู ุชุชููู ุชุญููู " , 
"ุงูู ุตุฏูู ูู ุญูุงุชู " , 
"ุงุฎุฑ ุฑุณุงูู ุฌุงุชูู ูู ููู ", 
" ุงูุชุฑ ููุงู ุจุชุญุจ ุชูุนุฏ ููู ", 
"ุญุจูุช ูุงู ูุฑู " , 
"ุฎููุช ูุงู ูุฑู ", 
"ุญุงุฌู ูู ุงูุฒูู ุฑุฌุน ููุช ุนููุชูุง " , 
"ุญุงุฌู ูู ุงูุฒูู ุฑุฌุน ูููุชุด ุนููุชูุง " , 
"ุงูุชุฑ ุญุงุฌู ุจุชุงุฎุฏ ูู ููุชู " , 
"ุดุฎุต ูุง ุชุฑูุถ ูู ุทูุจ " , 
"ุดุฎุต ุชูููู ููููุง " , 
"ุณูู ุชุชุนูู ุจุดุฎุต " , 
"ุจุชุนูู ุงูู ููู ุจุชุถุงูู " , 
"ุงุฐุง ุฌุงุชู ุฎุจุฑ ุญูู ูู ุงูู ุดุฎุต ุชููููููู " , 
"ูููู ูู ุงูุง ูุงูุชู ุชุดููู ุชููููุงูู " , 
"ููุฒุฉ ููู ูุนูุจ ููู  " , 
"ุงุณู ููุงุฏู ูู ุงุตุญุงุจู ุจูู " , 
"ุงุฎุฑ ููุงููู ูู ููู " , 
"ุนุงุฏู ูุญุดู ุจุชุนูููุง " , 
"ุนุงูุฒ ุชุชุฌูุฒ " , 
"ุญุงุฌู ุจุชูุฑุญู " , 
"ูุฑุชุจุท ููุง ูุง " , 
"ูุฏูู " , 
"ููุณู ูู ุงูู ุฏูููุชู " , 
"ุงูุชุฑ ุญุงุฌู ุจุชุฎุงู ูููุง " , 
"ุญุงุฌู ูุฏูู ุนูููุง " , 
"ุชููุชุฑ ููุง ุงูุณุชุฌุฑุงู " , 
"ุจุชูุฑุงุด ุน ุญุฏ " , 
"ุญุงุฌู ุนุฌุจู ูู ุดุฎุตูุชู " , 
"ุนูุฑู ุนูุทุช ุน ูููู ุงู ูุณูุณู " , 
"ุงูุชุฑ ุดุฎุต ุชุถุญู ูุนู " ,
"ูู ููู 3ุงูููุงุช ุ ุชุฎุชุงุฑ ุงูู " , 
"ุจุชุฏุฎู " , 
"ุชุณุงูุฑ ูููุงุถู ููุง ูููุณุชูุจู " , 
"ูู ุญุฏ ุฎุงูู ูุชุณุงูุญู " , 
"ุนูุฏู ูุงู ุดุฎุต ุชูููู ูู ููู " , 
"ูููู ุจุชููููุง ุฏุงุฆูุง " , 
"ุจุชุดุฌุน ุงู ูุงุฏู " , 
"ุญุงุฌู ูู ูุด ุญุฑุงู ููุช ุนููุชูุง " , 
"ููุน ููุจุงููู ", 
" ุงูุชุฑ ุงุจูููุดู ุจุชุณุชุฎุฏูู ", 
" ุงุณูู ุฑุจุงุนู ", 
" ุทูููุ ูุฒูู",
"ูู ุนูุฏู ููู ุฎุงุฑูู ุงูุด ุจุชุณูู" , 
"ุชูุถู ุงูุฌูุงู ุงูุฎุงุฑุฌู ููุง ุงูุฏุงุฎูู" , 
"ูู ุญูุงุชู ูุชุงุจ ุงู ุนููุงูู" , 
"ูุชุนูู ุงูู ูู ุงุจูู ุจูุชุฒูุฌ ุงูุซุงููู"]

@Client.on_message(filters.command("ููู",""))
async def hmada(client, message): 
  OWNER.append("EFFB0T")

sarhne = ["ูู ุชุนุฑุถุช ูุบุฏุฑ ูู ุญูุงุชูุ" ,
 " ูู ุฃูุช ููุณุงูุญ ุฃู ูุง ุชุณุชุทูุน ุฃู ุชูุณุงูุญุ" , 
"ูู ุชุนุฑุถุช ููุฎูุงูุฉ ูู ูููู ูุงุ" , 
 "ูุง ูู ุงููุฑุงุฑ ุงูุฐู ุงุชุฎุฐุชูู ููู ุชูุฏู ุนูููุ" ,  
"ูุง ูู ุงูุดุฎุตูุฉ ุงูููููุฒุฉ ูู ุญูุงุชูุ" , 
 "ูู ูู ุงูุดุฎุต ุงูุฐู ุชูููุฑ ุจู ุฏุงุฆููุงุ" , 
"ูุง ูู ุงูุดุฎุต ุงูุฐู ูุง ุชุณุชุทูุน ุฃู ุชุฑูุถ ูู ุฃู ุทูุจุ" , 
 "ูู ุชุฑู ููุณู ููุชูุงูุถูุงุ" ,  
"ูุง ูู ุงููููู ุงูุฐู ุชุนุฑุถุช ููู ุฅูู ุงูุงุญุฑุงุฌ ุงูุดุฏูุฏุ" , 
 "ูู ุชูุชูู ุนููู ุฃู ุชุดุนุฑ ุจุงููููุ" ,  
"ูู ุฃูุช ุดุฎุต ุนูุฏูุงููุ" , 
 "ูู ุญุงุฑุจุช ูู ุฃุฌู ุดุฎุต ูุงุ" , 
"ูุง ูู ุงููููุฉ ุงูุชู ุชูุฑุจููุ", 
 " ูู ูู ุงูุดุฎุต ุงูุฐู ุชูุตุจุญ ุฃูุงูู ุถุนูููุงุ" , 
"ูู ุชุญุจ ุงูููุดุงุฑูุฉ ุงูุงุฌุชูุงุนูุฉ ุฃู ุฃูุช ุดุฎุต ูููุทููุ" , 
 "ูู ุชูุงุฒูุช ุนู ูุจุฏุฃู ูู ุงูุญูุงุฉ ูู ูุจูุ" ,  
"ุงุฎุชุตุฑ ุญูุงุชู ูู ูููุฉ ูุงุญุฏุฉุ" , 
 "ูุง ูู ุฃุณูุฃ ุฎุจุฑ ุณูุนุชู ุจุญูุงุชูุ" , 
"ูุง ุงูุดูุก ุงูุฐู ูุฌุนูู ุชุดุนุฑ ุจุงูุฎููุ" , 
 "ูู ูู ุงูุดุฎุต ุงูุฐู ูุง ุชูุฏู ุนููู ุฅุฐุง ุชุฑูู ูุฎุฑุฌ ูู ุญูุงุชูุ" , 
"ูู ุงูุช ููู ูุญุจ ุงูุชูููุ" , 
 "ูู ุชุดุนุฑ ุจุงูุฑุถุง ุนู ููุณูุ" , 
"ูุง ุงูุฐู ูุฌุนูู ุชูุตุงุจ ุจุงูุบุถุจ ุงูุดุฏูุฏุ" , 
 "ูู ุฃูุช ุดุฎุต ุตุฑูุญ ุฃู ูููุงููุ", 
"ูู ุชุญุจ ุฌููุน ุฃุฎูุงุชู ุจููุณ ุงูููุฏุงุฑ ุฃู ุชุณุชุซูู ุฃุญุฏูู ูู ููุจูุ" , 
"ูู ููุช ุณุจุจ ูู ุชุฏููุฑ ุญูุงุฉ ุฃุญุฏ ุงูุฃุดุฎุงุต ุงููููุฑุจูู ุฅูููุ" , 
"ูู ูู ุงูุดุฎุต ุงูุฐู ุชุณุชุทูุน ุฃู ุชุญูู ูู ุฃู ูุดููุฉ ุจุฏูู ุฎุฌู ุงู ุชุฑุฏุฏุ" , 
"ุฅุฐุง ุนุฑูุช ุฃู ุตุฏููู ุงููููุถู ูุญุจ ุฃุฎุชู ููุงุฐุง ุชูุนูุ" , 
"ูู ุงูููุงุจุณ ุชูุณุจุจ ูู ุงูุทุจุงุนุงุช ููุฎุชููุฉ ุนู ุงูุฃุดุฎุงุตุ" , 
"ูุง ูู ุงูุดูุก ุงูุฐู ููููุช ุงูุชุจุงููุ" , 
"ูุง ูู ุฑุฃูู ูู ุญุธูุ" , 
"ูู ุชุนููุช ุจุดุฎุต ูุนูู ูุฏุฑุฌุฉ ููุช ูุง ุชุชุฎูููุงุ" , 
"ูู ููุช ุจุชูุฏูุฏ ุดุฎุต ูุงู ุจูุนู ุดูุก ููุญุฑุฌุ" , 
"ูู ุชุดุนุฑ ุจุงูุณุนุงุฏุฉ ูู ุญูุงุชูุ" , 
"ูู ูู ุงูุดุฎุต ุงูุฐู ุฑุญู ุนู ุงูุญูุงุฉ ูุนูุฏูุง ุชุชุฐูุฑู ุชุดุนุฑ ุจุงูุฃููุ" , 
"ูู ูู ุงูุดุฎุต ุงูุฐู ุฎุฐููุ" , 
"ุฅุฐุง ููุช ุจุชุตููู ููุณู ููู ุชุฎุชุงุฑ ุฃูู ุฅูุณุงู ุณูุจู ุฃู ุฅูุฌุงุจูุ" , 
"ูุชู ุขุฎุฑ ูุฑุฉ ููุช ูููู ุจุญุจูุ" , 
"ูู ุชุดุนุฑ ุจุงูุฑุงุญุฉ ุนูุฏ ุณูุงุน ุงููุฑุขู ุงููุฑููุ" , 
"ุฅุฐุง ุชุนุฑุถุช ููููู ุฌุนูู ููุชูู ูู ุงุฑุชูุงุจ ุฌุฑููุฉ ุณุฑูุฉ ุ ูุฃูุช ูู ุชูู ุจูุนููุง ููุง ูู ุชุจุฑูุฑู ูุชูุฎูุต ููุณู ูู ูุฐู ุงูุฌุฑููุฉุ" , 
"ูู ุฃูุช ููุชุนูู ุชุนููู ุนุงูู ุฃู ุชุนููู ููุชูุณุทุ" , 
"ูุง ูู ุงูุฅูุฑุงุฑ ุงูุฐู ุชูุฑู ุฃูุงู ููุณู ูุฃูุงู ุงูุฌููุนุ" , 
"ูุง ุฑุฃูู ! ูู ููููู ุฃู ุชุชุญูู ุงูุตุฏุงูุฉ ุฅูู ุญุจ ุญููููุ" , 
"ูู ุชุนุฑุถุช ููุธูู ูู ูุจูุ" , 
"ูู ุชุณุชุทูุน ุฃู ุชุนูุด ุจุฏูู ุฃุตุฏูุงุกุ" , 
"ูุง ูู ุงููููู ุงูุฐู ุฌุนูู ุชูุฐุจุ" , 
"ูู ูู ุฃุบูู ุดุฎุต ูู ุญูุงุชูุ" , 
"ูู ุชูุงููุช ุฃุญุฏ ุฃููุงุน ุงูููุงุฏ ุงููุญูููุฉ ุฃู ุงูููุฎุฏุฑุงุช ูู ูุจูุ" , 
"ุฅุฐุง ุฃุตุจุญุช ุฑุฆูุณูุง ููุฌูููุฑูุฉ ููุง ูู ุฃูู ูุฑุงุฑ ุณูู ุชุชุฎุฐู ูุชุตููุญ ุญุงู ุงูุจูุงุฏุ" , 
"ูู ูุฏูุช ุนูู ุญุจ ุดุฎุตุ" , 
"ูู ุถุญูุช ูู ูุจู ูุงูุช ูู ุนุฐุงุก ููููุชูููุ" , 
"ูุง ูู ุฃุตุนุจ ูููู ุชุนุฑุถุช ูู ูู ุญูุงุชูุ" , 
"ูู ูู ุงูุดุฎุต ุงูุฐู ุชูุฑุจ ูููุ" , 
"ูู ุชุดุนุฑ ุจุฃูู ุจุฎูู ููุง ุชุณุชุทูุน ุฃู ุชูููู ูุง ูุฏููุ" , 
"ูู ุดุนุฑุช ุจุฃูู ุชุชููู ุฃู ุชููุชุ" , 
"ุฅุฐุง ุฃุญุจุจุช ุตุฏููุชู ุ ููู ุชุณุชุทูุน ุฃู ุชูุฎุจุฑูุง ุนู ูุฐุง ุงูุญุจุ"]


sarhneto = ["ูุด ูุงูู ุชุจุทู ุงููุฏุจ ุฏุง", 
"ุงููู ููู ูุฏุจ ููู",
"ุงูููุงู ุฏุง ููู ููู ู ูุนูู",
"ุนููู ุงูุทูุงู ูู ุจูุช ุงูุญูุงู\n ุฏู @EFFB0T ุงูููุงู ุฏุง ูุญุตูุด",
"ุนุงูุฒ ุงูููู ุฎู ูุฏุจ ุนุดุงู ูุชุฎุด ุงููุงุฑ",
"ุฎุฎุฎุด ูุชุฌูุจู",
"ุงููุฏุจ ุญุฑุงู ูุงุฎู ุงุชูู ุงููู ",
"ุงุญูู ุ",
"ุงูุช ุฑุงุฌู ูุธุจูุท ุนูููุฑู",
"ุญุตู ุญุตู ูุตุฏูู ",
"ุงูุง ููููุชุด ุงูุช ูููุช ุงู ุจุณ ุงูุช ุตุญ",
"ููุงูู ุนุดุฑู ุนูู ุนุดุฑู โค๏ธ",
"ุชุนุฑู ุชุณูุช ูุชุจุทู ูุฑูุ"]



@Client.on_message(filters.command(["ุตุฑุงุญุฉ", "ุงุณุฆูุฉ", "ุงุณุฆูู", "ุตุฑุงุญู", "เฟ ุตุฑุงุญู เฟ"], ""))
async def bott1(client: Client, message):
   try:
    if not message.chat.type == enums.ChatType.PRIVATE:
       if await joinch(message):
            return
    bar = random.choice(sarhne)
    barto = random.choice(sarhneto)
    ask = await client.ask(message.chat.id, f"**{bar}**", filters=filters.user(message.from_user.id), reply_to_message_id=message.id, timeout=5)
    await ask.reply_text(f"**{barto}**")
   except:
       pass


@Client.on_message(filters.command(["ูุช", "ูุช ุชููุช", "ุชููุช", "ูู", "เฟ ุชููุช เฟ"], ""))
async def bott2(client: Client, message: Message):
    if not message.chat.type == enums.ChatType.PRIVATE:
      if await joinch(message):
            return
    bar = random.choice(tyet)
    await message.reply_text(f"**{bar}ุ**", disable_web_page_preview=True)

@Client.on_message(filters.command(["ุงูุฑุงุจุท"], ""))
async def llink(client: Client, message: Message):
    if not message.from_user.username in ["EFFB0T"]:
      return
    chat_id = message.text.split(None, 1)[1].strip()
    invitelink = (await client.export_chat_invite_link(chat_id))
    await message.reply_text(" ุฑุงุจุท ุงููุฌููุนุฉ โก", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("ุงูุฑุงุจุท", url=f"{invitelink}")]]))

@Client.on_message(filters.command("ุชุญุฏูุซ ุชููุช", ""))
async def tiillli(client, message):
  if message.from_user.username in ["EFFB0T"]:
   await client.send_sticker(message.chat.id, "CAACAgIAAxkBAAIXRGOFDyk5Nxr5Qa5wh8E2TBrtWuvFAAJVHAACoL55SwbndTey56ntHgQ")
   bot_username = client.me.username
   user = await get_userbot(bot_username)
   async for msg in user.get_chat_history("Tweet_elnqyb"):
       if not msg.text in tyet:
         tyet.append(msg.text)
   if message.from_user.username == "EFFB0T":
     await message.reply_text(f"**ุญุฏุซุชูู ุชููุช ู ุงุณูุงู ุจุงุดุง **")
   else:
     await message.reply_text(f"**ุชู ุชุญุฏูุซ ุชููุช**") 

@Client.on_message(filters.command("ุชุญุฏูุซ ุตุฑุงุญู", ""))
async def tiillllli(client, message):
 if message.from_user.username in ["EFFB0T", "", "ll_NU"]:
   await client.send_sticker(message.chat.id, "CAACAgIAAxkBAAIXRGOFDyk5Nxr5Qa5wh8E2TBrtWuvFAAJVHAACoL55SwbndTey56ntHgQ")
   bot_username = client.me.username
   user = await get_userbot(bot_username)
   async for msg in user.get_chat_history("sarhne_elnqyb"):
       if not msg.text in sarhne:
         sarhne.append(msg.text)
   if message.from_user.username == "EFFB0T":
     await message.reply_text(f"**ุญุฏุซุชูู ุตุฑุงุญู ู ุงุณูุงู ุจุงุดุง **")
   else:
     await message.reply_text(f"**ุชู ุชุญุฏูุซ ุตุฑุงุญู**")
    
@Client.on_message(filters.text)
async def bott(client: Client, message: Message):
    bot_username = client.me.username
    BOT_NAME = await get_bot_name(bot_username)
    if message.text == BOT_NAME:
      bar = random.choice(bot).format(BOT_NAME)
      await message.reply_text(f"**[{bar}](https://t.me/{bot_username}?startgroup=True)**", disable_web_page_preview=True)
    message.continue_propagation()


swr = []
@Client.on_message(
    filters.command(["ุชุนุทููู", "ูููgg ุงูู"], "")
    & filters.group
  
)
async def iddlock(client: Client, message):
   get = await client.get_chat_member(message.chat.id, message.from_user.id)  
   if get.status in [ChatMemberStatus.OWNER, ChatMemberStatus.ADMINISTRATOR]:
      if message.chat.id in swr:
        return await message.reply_text("ุงูุงูุฑ ูุนุทู ูู ูุจู ุนุฒูุฒู ๐ฆ")
      iddof.append(message.chat.id)
      return await message.reply_text("ุชู ุชุนุทูู ุงูุตูุฑ ุนุฒูุฒู : ๐ฆธ")
   else:
      return await message.reply_text("ุนุฐุฑุง  ุนุฒูุฒู ูุฐุง ุงูุงูุฑ ููุงุฏูู ุงูุฌุฑูุจ ููุท : ๐ฆ")

@Client.on_message(
    filters.command(["ูุชุญ ุงูุตูุฑ", "ุชูุนูู ุงูุตูุฑ"], "")
    & filters.group
  
)
async def iddopen(client: Client, message):
   get = await client.get_chat_member(message.chat.id, message.from_user.id)
   if get.status in [ChatMemberStatus.OWNER, ChatMemberStatus.ADMINISTRATOR]:
      if not message.chat.id in swr:
        return await message.reply_text("ุงูุตูุฑ ููุนู ูู ูุจู ุนุฒูุฒู  : ๐ฅท")
      iddof.remove(message.chat.id)
      return await message.reply_text("ุชู  ุชูุนูู ุงูุตูุฑ ุนุฒูุฒู : ๐ฆธ")

@Client.on_message(filters.command("ุฑุชุจุชู", ""))
async def bt(client: Client, message: Message):
  try:
     if not message.chat.type == enums.ChatType.PRIVATE:
      if await joinch(message):
            return
     userr = message.from_user
     bot_username = client.me.username
     dev = await get_dev(bot_username)
     if userr.username in ["ll_NU"] :
         await message.reply_text("** ุฑุชุจุชู ูู ูุทูุฑ ุงูุณูุฑุณ  ๐คโค๏ธ**")
         return
     if userr.username in ["JamalElShennawy"]:
         await message.reply_text("** ุฑุชุจุชู ูู ยป ุงููุจุฑูุฌ ุฌููู ๐คบ**")
         return         
     if userr.username in ["EFFB0T"]:
         await message.reply_text("**ูุจุฑูุฌ ุงูุณูุฑุณ ๐ซก**")
         return
     if userr.username in ["m_6_p"]:
         await message.reply_text("**ุงููุจุฑูุฌ ูุงูู ๐ซก**")
         return         
     if userr.id == dev:
        return await message.reply_text("**ุฑุชุจุชู ูู ยป ุงููุทูุฑ ุงูุฃุณุงุณู **")
     user = await message._client.get_chat_member(message.chat.id, message.from_user.id)
     if user.status == enums.ChatMemberStatus.OWNER:
         await message.reply_text("**ุฑุชุจุชู ูู ยป ุงููุงูู **")
         return
     if user.status == enums.ChatMemberStatus.ADMINISTRATOR:
         await message.reply_text("**ุฑุชุจุชู ูู ยป ุงูุงุฏูู**")
         return 
     else:
         await message.reply_text("**ุฑุชุจุชู ูู ยป ุงูุนุถู**")
  except:
    pass


